{"version":3,"sources":["images/Trandoshan.PNG","images/yoda.jpg","images/Hutt.jpg","images/Ewok.PNG","images/Gungan.PNG","images/MonCalamari.PNG","images/Neimodian.PNG","images/Sullustan.PNG","images/Toydarian.PNG","images/Dug.PNG","components/resultTem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","resultTem","Username","Name","Language","Classification","Designation","Eyes","Hair","Height","img","reset","transition","className","src","onClick","App","getData","a","async","fetch","species","json","data","hut","results","push","this","state","console","log","name","age","height","hairColor","eyeColor","result","handleChange","bind","handleSubmit","resetSelection","event","preventDefault","target","value","type","checked","setState","Hutt","Sullustan","Neimodian","Trandoshan","Gungan","MonCalamari","Yoda","Dug","Ewok","Toydarian","alert","undefined","id","required","placeholder","onChange","selected","language","classification","designation","eye_colors","hair_colors","average_height","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+MCsC5BC,G,KAnCG,SAAC,GAAD,IACdC,EADc,EACdA,SACAC,EAFc,EAEdA,KACAC,EAHc,EAGdA,SACAC,EAJc,EAIdA,eACAC,EALc,EAKdA,YACAC,EANc,EAMdA,KAAMC,EANQ,EAMRA,KACNC,EAPc,EAOdA,OACAC,EARc,EAQdA,IACAC,EATc,EASdA,MATc,EAUdC,WAVc,OAalB,yBAAKC,UAAU,kBACC,6BACI,mCAASX,EAAT,MACA,gDAAsBC,GACtB,yBAAKW,IAAKJ,KAGV,yBAAKG,UAAU,cACP,4BAAKV,GACL,wCAAcC,GACd,8CAAoBC,GACpB,2CAAiBC,GACjB,oCAAUC,GACV,oCAAUC,GACV,sCAAYC,EAAZ,MAEA,4BAAQM,QAASJ,GAAjB,kB,wKCyMbK,E,YAvNX,aAAc,IAAD,8BACT,+CAgBJC,QAAU,8BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACgBE,MAAM,kCADtB,cACAC,EADA,kBAAAH,EAAA,MAEaG,EAAQC,QAFrB,OAEAC,EAFA,OAGAC,EAAMD,EAAKE,QAAQ,GACzBF,EAAKE,QAAQC,KAAKF,GAClBG,KAAKC,MAAMP,QAAUE,EAAKE,QAC1BI,QAAQC,IAAIP,GANN,iDAfN,EAAKK,MAAQ,CACTP,QAAS,GACTU,KAAM,iBACNC,IAAK,QACLC,OAAQ,QACRC,UAAW,OACXC,SAAU,SACVC,QAAQ,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAbb,E,iFA2BTX,KAAKV,Y,mCAIIwB,GACTA,EAAMC,iBACN,IAAMC,EAASF,EAAME,OACfC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7Db,EAAOY,EAAOZ,KACpBJ,KAAKoB,SAAL,eACKhB,EAAOa,IAEZf,QAAQC,IAAIH,KAAKC,S,mCAIRa,GACTA,EAAMC,iBACN,IAAMd,EAAQD,KAAKC,MACfA,EAAMG,MAAQH,EAAMI,KAAOJ,EAAMK,QAAUL,EAAMM,WAAaN,EAAMO,SAC/C,SAAjBP,EAAMK,QACY,YAAdL,EAAMI,MACiB,WAAnBJ,EAAMO,UAA4C,QAAnBP,EAAMO,UAAyC,UAAnBP,EAAMO,UAA2C,WAAnBP,EAAMO,UAC/FR,KAAKoB,SAAS,CAACX,OAAQ,KACvBT,KAAKoB,SAAS,CAACrC,IAAKsC,QAEpBrB,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAKuC,QAGV,QAAdrB,EAAMI,MACiB,QAAnBJ,EAAMO,UAAyC,SAAnBP,EAAMO,UAA0C,UAAnBP,EAAMO,UAA2C,UAAnBP,EAAMO,UAC7FR,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAKwC,QAEpBvB,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAKyC,QAGV,UAAdvB,EAAMI,MACiB,QAAnBJ,EAAMO,UAAyC,WAAnBP,EAAMO,UAA4C,UAAnBP,EAAMO,UAA2C,UAAnBP,EAAMO,UAA2C,SAAnBP,EAAMO,UAC7HR,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK0C,QAEpBzB,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAKyC,SAIN,UAAjBvB,EAAMK,SAEO,YAAdL,EAAMI,MACiB,WAAnBJ,EAAMO,UAA4C,WAAnBP,EAAMO,UAA4C,QAAnBP,EAAMO,UAAyC,UAAnBP,EAAMO,UAChGR,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK2C,QAEpB1B,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK4C,QAGV,QAAd1B,EAAMI,MACiB,WAAnBJ,EAAMO,UAA4C,SAAnBP,EAAMO,UAA0C,SAAnBP,EAAMO,UAA0C,UAAnBP,EAAMO,UAC/FR,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK6C,QAEpB5B,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK8C,QAGV,UAAd5B,EAAMI,MACiB,WAAnBJ,EAAMO,UAA4C,SAAnBP,EAAMO,UAA0C,UAAnBP,EAAMO,UAA2C,UAAnBP,EAAMO,UAChGR,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK+C,QAEpB9B,KAAKoB,SAAS,CAACX,OAAQ,IACvBT,KAAKoB,SAAS,CAACrC,IAAK4C,SAOhCI,MAAM,+B,uCAOV/B,KAAKoB,SAAS,CAACX,YAAQuB,M,+BAMvB,OAAIhC,KAAKC,MAAMP,UAAYM,KAAKC,MAAMQ,OAG9B,yBAAKvB,UAAU,WACX,wBAAI+C,GAAG,QAAP,QACA,oCAEA,8BACA,4CACA,0GACI,uCAEI,2BAAOC,UAAQ,EAAChB,KAAK,OAAOd,KAAK,OAAO+B,YAAY,iBAAkBC,SAAUpC,KAAKU,gBAG7F,yBAAKxB,UAAU,iBAAf,OAEQ,yBAAKA,UAAU,UACX,4BAASkB,KAAM,MAAOa,MAAM,QAAQ7B,QAASY,KAAKU,aAAcxB,UAA8B,UAAnBc,KAAKC,MAAMI,IAAkB,cAAW2B,GAAnH,SACA,4BAAS5B,KAAM,MAAOa,MAAM,MAAM7B,QAASY,KAAKU,aAAcxB,UAA8B,QAAnBc,KAAKC,MAAMI,IAAgB,cAAW2B,GAA/G,OACA,4BAAS5B,KAAM,MAAOa,MAAM,UAAU7B,QAASY,KAAKU,aAAcxB,UAA8B,YAAnBc,KAAKC,MAAMI,IAAoB,cAAW2B,GAAvH,aAGZ,yBAAK9C,UAAU,iBAAf,UAGQ,yBAAKA,UAAU,UACX,4BAAQkB,KAAM,SAAUa,MAAM,OAAQ7B,QAASY,KAAKU,aAAcxB,UAAiC,SAAtBc,KAAKC,MAAMK,OAAoB,cAAW0B,GAAvH,QACA,4BAAS5B,KAAM,SAAUa,MAAM,QAAS7B,QAASY,KAAKU,aAAcxB,UAAiC,UAAtBc,KAAKC,MAAMK,OAAqB,cAAW0B,GAA1H,WAIR,4CAEI,4BAAQE,UAAQ,EAAC9B,KAAM,WAAYa,MAAOjB,KAAKC,MAAMgB,MAAOmB,SAAUpC,KAAKU,cAEvE,4BAAQxB,UAAU,SAAS+B,MAAM,UAAjC,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQoB,UAAQ,EAACpB,MAAM,QAAvB,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,WAIR,6CAEI,4BAAQiB,UAAQ,EAAC9B,KAAM,YAAaa,MAAOjB,KAAKC,MAAMgB,MAAOmB,SAAUpC,KAAKU,cACxE,4BAAQO,MAAM,SAAd,cACA,4BAAQoB,UAAQ,EAACpB,MAAM,SAAvB,UACA,4BAAQA,MAAM,OAAd,cACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,WAGR,2BAAOgB,GAAG,YAAYf,KAAK,SAASD,MAAM,SAAS7B,QAASY,KAAKY,iBAKtEZ,KAAKC,MAAMQ,OAGd,kBAAC,EAAD,CACIlC,SAAUyB,KAAKC,MAAMG,KACrB5B,KAAMwB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQL,KAC5C3B,SAAUuB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQ6B,SAChD5D,eAAgBsB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQ8B,eACtD5D,YAAaqB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQ+B,YACnD5D,KAAMoB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQgC,WAC5C5D,KAAMmB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQiC,YAC5C5D,OAAQkB,KAAKC,MAAMP,QAAQM,KAAKC,MAAMQ,QAAQkC,eAC9C5D,IAAKiB,KAAKC,MAAMlB,IAChBC,MAAOgB,KAAKa,gBAVhB,cAWgBb,KAAKC,MAAMhB,YAMvB,yBAAKC,UAAU,WACX,wBAAIA,UAAU,SAAd,qCACA,gD,GA/MN0D,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d48f05fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Trandoshan.96fff2bf.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yoda.add64530.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Hutt.03c9f531.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Ewok.8e26cbbb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Gungan.eb9d5331.PNG\";","module.exports = __webpack_public_path__ + \"static/media/MonCalamari.1fb3d2a3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Neimodian.987b962f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Sullustan.7ab51776.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Toydarian.c8fcb77f.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Dug.4a6b6322.PNG\";","import React from 'react'\r\nimport '../App.css';\r\n\r\nconst resultTem = ({\r\n    Username, \r\n    Name,\r\n    Language,\r\n    Classification ,\r\n    Designation ,\r\n    Eyes, Hair,\r\n    Height,\r\n    img ,\r\n    reset,\r\n    transition\r\n}) => (\r\n\r\n<div className=\"result-wrapper\">\r\n                <div>\r\n                    <h1>Hey {Username}! </h1>\r\n                    <p>Looks like your a {Name}</p>\r\n                    <img src={img}></img>\r\n                    </div>\r\n                    \r\n                    <div className=\"resultDiv2\">\r\n                            <h2>{Name}</h2>\r\n                            <p>Language: {Language}</p>\r\n                            <p>Classification: {Classification}</p>\r\n                            <p>Designation: {Designation}</p>\r\n                            <p>Eyes: {Eyes}</p>\r\n                            <p>Hair: {Hair}</p>\r\n                            <p>Height: {Height}cm</p>\r\n                            \r\n                            <button onClick={reset}>try again?</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n)\r\n\r\nexport default resultTem;","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport ResultTem from './components/resultTem'\r\n\r\n//import images for results section\r\nimport Hutt from './images/Hutt.jpg'\r\nimport Ewok from './images/Ewok.PNG'\r\nimport Gungan from './images/Gungan.PNG'\r\nimport MonCalamari from './images/MonCalamari.PNG'\r\nimport Neimodian from './images/Neimodian.PNG'\r\nimport Sullustan from './images/Sullustan.PNG'\r\nimport Toydarian from './images/Toydarian.PNG'\r\nimport Trandoshan from './images/Trandoshan.PNG'\r\nimport Yoda from './images/yoda.jpg'\r\nimport Dug from './images/Dug.PNG'\r\n\r\n//set state presets so user can click submit immeditly and bind 'this' so fuctions work.\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            species: [],\r\n            name: \"Luke Skywalker\",\r\n            age: \"young\",\r\n            height: \"short\",\r\n            hairColor: \"blue\",\r\n            eyeColor: \"blonde\",\r\n            result: false,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.resetSelection = this.resetSelection.bind(this);\r\n    }\r\n\r\n    //function to fetch user data from starwars api and set as state\r\n    getData = async function(){\r\n        const species = await fetch('https://swapi.co/api/species/');\r\n        const data = await species.json();\r\n        const hut = data.results[0];\r\n        data.results.push(hut);\r\n        this.state.species = data.results;\r\n        console.log(data)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getData();\r\n    }\r\n\r\n    //handle change for form inputs, setState as value\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n        console.log(this.state)\r\n        \r\n    }\r\n    //set result based on form data and if statments\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const state = this.state;\r\n        if (state.name && state.age && state.height && state.hairColor && state.eyeColor){\r\n            if (state.height === \"tall\"){\r\n                if (state.age === \"ancient\"){\r\n                    if (state.eyeColor === \"yellow\" || state.eyeColor === \"red\" || state.eyeColor === \"green\" || state.eyeColor === \"orange\" ){\r\n                        this.setState({result: 10});\r\n                        this.setState({img: Hutt});\r\n                    } else {\r\n                        this.setState({result: 5});\r\n                        this.setState({img: Sullustan});\r\n                    }\r\n                }\r\n                if (state.age === \"old\"){\r\n                    if (state.eyeColor === \"red\" || state.eyeColor === \"pink\" || state.eyeColor === \"brown\" || state.eyeColor === \"black\" ){\r\n                        this.setState({result: 6});\r\n                        this.setState({img: Neimodian});\r\n                    } else {\r\n                        this.setState({result: 2});\r\n                        this.setState({img: Trandoshan});\r\n                    }\r\n                }\r\n                if (state.age === \"young\"){\r\n                    if (state.eyeColor === \"red\" || state.eyeColor === \"orange\" || state.eyeColor === \"brown\" || state.eyeColor === \"black\" || state.eyeColor === \"blue\"   ){\r\n                        this.setState({result: 7});\r\n                        this.setState({img: Gungan});\r\n                    } else {\r\n                        this.setState({result: 2});\r\n                        this.setState({img: Trandoshan});\r\n                    }\r\n                }\r\n            }\r\n            else if (state.height === \"short\"){\r\n                \r\n                if (state.age === \"ancient\"){\r\n                    if (state.eyeColor === \"yellow\" || state.eyeColor === \"orange\" || state.eyeColor === \"red\" || state.eyeColor === \"green\"){\r\n                        this.setState({result: 3});\r\n                        this.setState({img: MonCalamari});\r\n                    } else {\r\n                        this.setState({result: 1});\r\n                        this.setState({img: Yoda});\r\n                    }\r\n                }\r\n                if (state.age === \"old\"){\r\n                    if (state.eyeColor === \"yellow\" || state.eyeColor === \"blue\" || state.eyeColor === \"pink\" || state.eyeColor === \"green\"){\r\n                        this.setState({result: 9});\r\n                        this.setState({img: Dug});\r\n                    } else {\r\n                        this.setState({result: 4});\r\n                        this.setState({img: Ewok});\r\n                    }\r\n                }\r\n                if (state.age === \"young\"){\r\n                    if (state.eyeColor === \"yellow\" || state.eyeColor === \"blue\" || state.eyeColor === \"brown\" || state.eyeColor === \"green\"){\r\n                        this.setState({result: 8});\r\n                        this.setState({img: Toydarian});\r\n                    } else {\r\n                        this.setState({result: 1});\r\n                        this.setState({img: Yoda});\r\n                    }\r\n                }\r\n            }\r\n               \r\n        } else {\r\n            //show alert if data is not filled out yet submit is clicked\r\n            alert(\"Please select all options\")\r\n        }\r\n    }\r\n\r\n\r\n    //reset state for try again btn\r\n    resetSelection() {\r\n        this.setState({result: undefined})\r\n    }\r\n    \r\n    \r\n    render(){\r\n        //if api data loaded and form has not been completed show quiz section\r\n        if (this.state.species && !this.state.result) {\r\n            return(\r\n                //quiz section\r\n                <div className='wrapper'>\r\n                    <h1 id=\"hero\">STAR</h1>\r\n                    <h1>WARS</h1>\r\n                    \r\n                    <form>\r\n                    <h2>Species Quiz</h2>\r\n                    <p>Enter your information below to see where you fit in the starwars universe.</p>\r\n                        <label>\r\n                            Name:\r\n                            <input required type=\"text\" name=\"name\" placeholder=\"Luke Skywalker\"  onChange={this.handleChange}/>\r\n                        </label>\r\n\r\n                    <div className=\"optionSection\">\r\n                        Age:\r\n                            <div className=\"btnDiv\">\r\n                                <button  name={\"age\"} value=\"young\" onClick={this.handleChange} className={this.state.age === \"young\" ? \"active\" : undefined}>young</button>\r\n                                <button  name={\"age\"} value=\"old\" onClick={this.handleChange} className={this.state.age === \"old\" ? \"active\" : undefined}>old</button>\r\n                                <button  name={\"age\"} value=\"ancient\" onClick={this.handleChange} className={this.state.age === \"ancient\" ? \"active\" : undefined}>ancient</button>\r\n                            </div>\r\n                    </div>            \r\n                    <div className=\"optionSection\">        \r\n                        \r\n                            Height:\r\n                            <div className=\"btnDiv\">\r\n                                <button name={\"height\"} value=\"tall\"  onClick={this.handleChange} className={this.state.height === \"tall\" ? \"active\" : undefined}>tall</button>\r\n                                <button  name={\"height\"} value=\"short\"  onClick={this.handleChange} className={this.state.height === \"short\" ? \"active\" : undefined}>short</button>\r\n                            </div>\r\n                    </div>  \r\n\r\n                        <label>\r\n                        Eye Color:\r\n                            <select required name={\"eyeColor\"} value={this.state.value} onChange={this.handleChange}>\r\n                            \r\n                                <option className=\"option\" value=\"yellow\">Yellow</option>\r\n                                <option value=\"orange\">Orange</option>\r\n                                <option value=\"green\">Green</option>\r\n                                <option selected value=\"blue\">Blue</option>\r\n                                <option value=\"pink\">Pink</option>\r\n                                <option value=\"red\">Red</option>\r\n                                <option value=\"brown\">Brown</option>\r\n                                <option value=\"black\">Black</option>\r\n                            </select>\r\n                        </label>\r\n\r\n                        <label>\r\n                        Hair Color:\r\n                            <select required name={\"hairColor\"} value={this.state.value} onChange={this.handleChange}>\r\n                                <option value=\"white\">White/Grey</option>\r\n                                <option selected value=\"white\">Blonde</option>\r\n                                <option value=\"red\">Red/Orange</option>\r\n                                <option value=\"brown\">Brown</option>\r\n                                <option value=\"black\">Black</option>\r\n                            </select>\r\n                        </label>\r\n                        <input id=\"input_btn\" type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\r\n\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else if (this.state.result){\r\n           // otherwise, if form is complete and there is a result, show results section. \r\n            return(\r\n                <ResultTem \r\n                    Username={this.state.name} \r\n                    Name={this.state.species[this.state.result].name}\r\n                    Language={this.state.species[this.state.result].language} \r\n                    Classification={this.state.species[this.state.result].classification} \r\n                    Designation={this.state.species[this.state.result].designation} \r\n                    Eyes={this.state.species[this.state.result].eye_colors} \r\n                    Hair={this.state.species[this.state.result].hair_colors} \r\n                    Height={this.state.species[this.state.result].average_height} \r\n                    img={this.state.img} \r\n                    reset={this.resetSelection}>\r\n                    transition={this.state.transition}\r\n                 </ResultTem>\r\n            )\r\n        } else {\r\n            // otherwise show loading section\r\n            return(\r\n                    <div className='wrapper'>\r\n                        <h1 className=\"c1 f1\">Which Star Wars Species Are you??</h1>\r\n                        <div>loading...</div>     \r\n                    </div> \r\n                )\r\n        }\r\n\r\n        }\r\n    } \r\n    \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}